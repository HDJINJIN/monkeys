{"version":3,"sources":["images/two_ships.png","tiles.js","Offer.js","Board.js","Score.js","Tutorial.js","GameOver.js","index.js","images/coconuts.png"],"names":["module","exports","TileRoute","tileHead","tileTail","coconuts","chests","redShips","blueShips","redAnchors","blueAnchors","this","Tile","routes","BoardRoute","boardHead","boardTail","tileRoutes","tileRoute","value","numRed","numBlue","red","blue","calcScore","tiles","tile_list","forEach","tile","index","getTiles","OfferTile","offerIndex","remainingTileIDs","className","draggable","onDragStart","e","ev","dataTransfer","setData","target","style","drag","onDragEnd","Offer","id","Math","max","length","Board","played","handleDrop","board","map","onDrop","key","onDragEnter","event","preventDefault","onDragLeave","onDragOver","Score","score","scores","route","reduce","accumulator","currentValue","currentIndex","array","tallyScore","polyfill","dragImageCenterOnTouch","rules","src","require","alt","PreviousButton","currentRule","setCurrentRule","onClick","disabled","NextButton","Tutorial","showRules","setShowRules","useState","GameOver","every","item","display","closeGameOver","shuffleArray","swapIndex","floor","random","swapValue","getBoardNodesFromFlatIndex","flatIndex","numColumns","row","topLeft","bottomLeft","updateRoutes","boardRoutes","boardNodes","convertedTileHead","convertedTileTail","headMatch","tailMatch","boardRoute","matchingRoute","newValue","matchingValue","push","newHead","newTail","concat","indexToDelete","indexOf","splice","newRoute","getInitialSetup","numRows","Object","keys","initialTiles","startingPositions","startingBoard","Array","fill","startingRoutes","head","tail","Game","startingTileIDs","drawEffect","setRemainingTileIDs","setPlayed","setRoutes","useEffect","effectiveDrawEffect","slice","document","getElementsByTagName","setProperty","join","getData","newPlayed","partitionedPlayed","input","output","i","partition","column","validDropQ","updatedRoutes","newRemainingTileIDs","ReactDOM","render","getElementById","createElement"],"mappings":"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","file":"static/js/main.b3badc2f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/two_ships.846e2372.png\";","export class TileRoute {\n  constructor({\n    tileHead = null,\n    tileTail = null,\n    coconuts = 0,\n    chests = 0,\n    redShips = 0,\n    blueShips = 0,\n    redAnchors = 0,\n    blueAnchors = 0,\n  }) {\n    // head and tail will be coordinates (0,0) to (1,1)\n    // describing their location on the tile.\n    // They will be converted to an int referring to\n    // board placement once placed.\n    // Head or tail may be null if the route terminates.\n    this.tileHead = tileHead;\n    this.tileTail = tileTail;\n\n    // The number of each type of feature on the route\n    this.coconuts = coconuts;\n    this.chests = chests;\n    this.redShips = redShips;\n    this.blueShips = blueShips;\n    this.redAnchors = redAnchors;\n    this.blueAnchors = blueAnchors;\n  }\n}\n\nexport class Tile {\n  constructor({ routes }) {\n    this.routes = routes;\n  }\n}\n\nexport class BoardRoute {\n  constructor({ boardHead = null, boardTail = null, tileRoutes = [] }) {\n    // head and tail are ints corresponding to location on the board.\n    // Head and/or tail may be null if the route terminates.\n    this.boardHead = boardHead;\n    this.boardTail = boardTail;\n\n    this.tileRoutes = tileRoutes;\n  }\n\n  // Getter\n  get score() {\n    return this.calcScore();\n  }\n  // Method\n  calcScore() {\n    // Count the features across all tile routes in this route\n    let coconuts = 0;\n    let chests = 0;\n    let redShips = 0;\n    let blueShips = 0;\n    let redAnchors = 0;\n    let blueAnchors = 0;\n    for (let tileRoute of this.tileRoutes) {\n      coconuts += tileRoute.coconuts;\n      chests += tileRoute.chests;\n      redShips += tileRoute.redShips;\n      blueShips += tileRoute.blueShips;\n      redAnchors += tileRoute.redAnchors;\n      blueAnchors += tileRoute.blueAnchors;\n    }\n\n    let value = chests ? coconuts * 2 : coconuts;\n    let numRed = redAnchors ? redShips * 2 : redShips;\n    let numBlue = blueAnchors ? blueShips * 2 : blueShips;\n    if (numBlue > numRed) {\n      return { red: 0, blue: value };\n    } else if (numRed > numBlue) {\n      return { red: value, blue: 0 };\n    } else {\n      return { red: 0, blue: 0 };\n    }\n  }\n}\n\nfunction getTiles() {\n  const tile_list = [\n    new Tile({\n      routes: [\n        new TileRoute({\n          tileHead: 0,\n          tileTail: 2,\n          coconuts: 1,\n        }),\n        new TileRoute({\n          tileHead: 1,\n          tileTail: 3,\n          coconuts: 1,\n        }),\n      ],\n    }),\n    new Tile({\n      routes: [\n        new TileRoute({\n          tileHead: 0,\n          tileTail: null,\n          blueShips: 1,\n        }),\n        new TileRoute({\n          tileHead: 1,\n          tileTail: 2,\n          coconuts: 1,\n          redShips: 1,\n        }),\n        new TileRoute({\n          tileHead: 3,\n          tileTail: null,\n          blueAnchors: 1,\n        }),\n      ],\n    }),\n    new Tile({\n      routes: [\n        new TileRoute({\n          tileHead: 0,\n          tileTail: 1,\n          chests: 1,\n        }),\n        new TileRoute({\n          tileHead: 2,\n          tileTail: 3,\n          blueShips: 2,\n        }),\n      ],\n    }),\n    new Tile({\n      routes: [\n        new TileRoute({\n          tileHead: 0,\n          tileTail: null,\n          coconuts: 1,\n        }),\n        new TileRoute({\n          tileHead: 2,\n          tileTail: null,\n          blueAnchors: 1,\n        }),\n        new TileRoute({\n          tileHead: 1,\n          tileTail: 3,\n          redShips: 1,\n        }),\n      ],\n    }),\n    new Tile({\n      routes: [\n        new TileRoute({\n          tileHead: 0,\n          tileTail: null,\n          coconuts: 1,\n        }),\n        new TileRoute({\n          tileHead: 1,\n          tileTail: 2,\n          redShips: 1,\n        }),\n        new TileRoute({\n          tileHead: 3,\n          tileTail: null,\n          coconuts: 2,\n        }),\n      ],\n    }),\n    new Tile({\n      routes: [\n        new TileRoute({\n          tileHead: 0,\n          tileTail: 1,\n          coconuts: 2,\n        }),\n        new TileRoute({\n          tileHead: null,\n          tileTail: 2,\n          redShips: 1,\n        }),\n        new TileRoute({\n          tileHead: 3,\n          tileTail: null,\n          blueShips: 1,\n        }),\n      ],\n    }),\n    new Tile({\n      routes: [\n        new TileRoute({\n          tileHead: 0,\n          tileTail: 2,\n          redShips: 1,\n        }),\n        new TileRoute({\n          tileHead: 1,\n          tileTail: null,\n          coconuts: 1,\n        }),\n        new TileRoute({\n          tileHead: 3,\n          tileTail: null,\n          redShips: 1,\n        }),\n      ],\n    }),\n    new Tile({\n      routes: [\n        new TileRoute({\n          tileHead: 0,\n          tileTail: 3,\n          blueShips: 1,\n        }),\n        new TileRoute({\n          tileHead: 1,\n          tileTail: 2,\n          redShips: 1,\n        }),\n      ],\n    }),\n    new Tile({\n      routes: [\n        new TileRoute({\n          tileHead: 0,\n          tileTail: 3,\n          blueShips: 1,\n          coconuts: 1,\n        }),\n        new TileRoute({\n          tileHead: null,\n          tileTail: 2,\n          redAnchors: 1,\n        }),\n        new TileRoute({\n          tileHead: 1,\n          tileTail: null,\n          redShips: 1,\n        }),\n      ],\n    }),\n    new Tile({\n      routes: [\n        new TileRoute({\n          tileHead: 0,\n          tileTail: null,\n          redShips: 1,\n        }),\n        new TileRoute({\n          tileHead: 1,\n          tileTail: null,\n          redAnchors: 1,\n        }),\n        new TileRoute({\n          tileHead: 2,\n          tileTail: 3,\n          coconuts: 1,\n          chests: 1,\n        }),\n      ],\n    }),\n    new Tile({\n      routes: [\n        new TileRoute({\n          tileHead: 0,\n          blueAnchors: 1,\n        }),\n        new TileRoute({\n          tileHead: 1,\n          blueShips: 1,\n        }),\n        new TileRoute({\n          tileHead: 2,\n          tileTail: 3,\n          redShips: 1,\n          coconuts: 1,\n        }),\n      ],\n    }),\n    new Tile({\n      routes: [\n        new TileRoute({\n          tileHead: 0,\n          tileTail: 3,\n          redShips: 2,\n        }),\n        new TileRoute({\n          tileHead: 1,\n          blueAnchors: 1,\n        }),\n        new TileRoute({\n          tileHead: 2,\n          coconuts: 1,\n        }),\n      ],\n    }),\n    new Tile({\n      routes: [\n        new TileRoute({\n          tileHead: 0,\n          tileTail: 3,\n          redShips: 1,\n        }),\n        new TileRoute({\n          tileHead: 1,\n          tileTail: 2,\n          coconuts: 2,\n        }),\n      ],\n    }),\n    new Tile({\n      routes: [\n        new TileRoute({\n          tileHead: 0,\n          tileTail: 2,\n          blueShips: 1,\n        }),\n        new TileRoute({\n          tileHead: 1,\n          coconuts: 1,\n        }),\n        new TileRoute({\n          tileHead: 3,\n          redAnchors: 1,\n        }),\n      ],\n    }),\n    new Tile({\n      routes: [\n        new TileRoute({\n          tileHead: 0,\n          tileTail: 1,\n          coconuts: 2,\n        }),\n        new TileRoute({\n          tileHead: 2,\n          tileTail: 3,\n          chests: 1,\n        }),\n      ],\n    }),\n    new Tile({\n      routes: [\n        new TileRoute({\n          tileHead: 0,\n          coconuts: 2,\n        }),\n        new TileRoute({\n          tileHead: 1,\n          tileTail: 2,\n          blueShips: 1,\n        }),\n        new TileRoute({\n          tileHead: 3,\n          coconuts: 1,\n        }),\n      ],\n    }),\n    new Tile({\n      routes: [\n        new TileRoute({\n          tileHead: 0,\n          coconuts: 1,\n        }),\n        new TileRoute({\n          tileHead: 2,\n          blueShips: 1,\n        }),\n        new TileRoute({\n          tileHead: 1,\n          tileTail: 3,\n          blueShips: 1,\n        }),\n      ],\n    }),\n    new Tile({\n      routes: [\n        new TileRoute({\n          tileHead: 0,\n          tileTail: 3,\n          coconuts: 2,\n        }),\n        new TileRoute({\n          tileHead: 1,\n          tileTail: 2,\n          blueShips: 1,\n        }),\n      ],\n    }),\n    new Tile({\n      routes: [\n        new TileRoute({\n          tileHead: 0,\n          redAnchors: 1,\n        }),\n        new TileRoute({\n          tileHead: 1,\n          tileTail: 2,\n          blueShips: 2,\n        }),\n        new TileRoute({\n          tileHead: 3,\n          coconuts: 1,\n        }),\n      ],\n    }),\n    new Tile({\n      routes: [\n        new TileRoute({\n          tileHead: 0,\n          tileTail: 1,\n          chests: 1,\n        }),\n        new TileRoute({\n          tileHead: 2,\n          tileTail: 3,\n          redShips: 2,\n        }),\n      ],\n    }),\n  ];\n\n  let tiles = {};\n\n  tile_list.forEach((tile, index) => (tiles[index] = tile));\n\n  return tiles;\n}\n\nexport const tiles = getTiles();\n","import React from \"react\";\nimport { polyfill } from \"mobile-drag-drop\";\n\npolyfill({\n  dragImageCenterOnTouch: true,\n});\n\nfunction OfferTile({ offerIndex, remainingTileIDs }) {\n  const tile = remainingTileIDs[offerIndex];\n  const className = tile\n    ? \"square filled tile\" + tile + \" offer-tile\"\n    : \"square offer-tile\";\n\n  function drag(ev, offerIndex, tile) {\n    ev.dataTransfer.setData(\"offerIndex\", offerIndex);\n    ev.dataTransfer.setData(\"tile\", tile);\n    ev.target.style[\"opacity\"] = \"0.5\";\n  }\n\n  function drop(ev) {\n    ev.target.style[\"opacity\"] = \"1\";\n  }\n\n  return (\n    <div\n      className={className}\n      draggable=\"true\"\n      onDragStart={(e) => drag(e, offerIndex, tile)}\n      onDragEnd={(e) => drop(e)}\n    />\n  );\n}\n\nexport default function Offer({ remainingTileIDs }) {\n  return (\n    <div id=\"offer-area\">\n      <div id=\"offer\">\n        <OfferTile offerIndex=\"0\" remainingTileIDs={remainingTileIDs} />\n        <OfferTile offerIndex=\"1\" remainingTileIDs={remainingTileIDs} />\n        <OfferTile offerIndex=\"2\" remainingTileIDs={remainingTileIDs} />\n      </div>\n      <div className=\"square filled draw-pile\">\n        {Math.max(0, remainingTileIDs.length - 3)}\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { polyfill } from \"mobile-drag-drop\";\n\npolyfill({\n  dragImageCenterOnTouch: true,\n});\n\nexport default function Board({ played, handleDrop }) {\n  const board = played.map((tile, index) => {\n    const className = tile ? \"square filled tile\" + tile : \"square\";\n\n    return (\n      <div\n        onDrop={(e) => handleDrop(e, index)}\n        key={index}\n        className={className}\n        onDragEnter={(event) => {\n          event.preventDefault();\n          event.target.style[\"background-color\"] = \"darkblue\";\n        }}\n        onDragLeave={(event) => {\n          event.target.style[\"background-color\"] = \"transparent\";\n        }}\n        onDragOver={(event) => {\n          event.preventDefault();\n        }}\n      />\n    );\n  });\n\n  return <div id=\"board\">{board}</div>;\n}\n","import React from \"react\";\n\nexport function tallyScore(routes) {\n  // Get the red/blue score for each route and sum them up\n  let scores = routes.map((route) => route.score);\n  let redScore = scores\n    .map((score) => score.red)\n    .reduce((accumulator, currentValue, currentIndex, array) => {\n      return accumulator + currentValue;\n    }, 0);\n  let blueScore = scores\n    .map((score) => score.blue)\n    .reduce((accumulator, currentValue, currentIndex, array) => {\n      return accumulator + currentValue;\n    }, 0);\n  return { red: redScore, blue: blueScore };\n}\n\nexport default function Score({ routes }) {\n  const score = tallyScore(routes);\n\n  return (\n    <div className=\"score\">\n      <div className=\"red-score\">\n        <div className=\"score-icon red\" />\n        {score.red}\n      </div>\n      <div className=\"blue-score\">\n        <div className=\"score-icon blue\" />\n        {score.blue}\n      </div>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\n\nconst rules = [\n  <div className=\"tutorial-step\">\n    <div className=\"tutorial-text\">\n      <h1>Monkeys of the Caribbean</h1>\n      <br />\n      <br />\n      2 Players\n      <br />\n      15 Minutes\n      <br />\n      <br />\n      Game by Colin Thom\n      <br />\n      Built by Sarah Edwards\n    </div>\n    <div className=\"illustration\">\n      <div className=\"image monkey\" />\n    </div>\n  </div>,\n\n  <div className=\"tutorial-step\">\n    <div className=\"tutorial-text\">\n      A crew of monkeys&mdash;with you as the captain&mdash;overthrew their\n      pirate overlords. But it is not gold you want. Nay, coconuts are the\n      bounty you seek. Alas! There be limited space on the sea. Compete for\n      control of sea routes to get the most coconuts.\n    </div>\n    <img\n      src={require(\"./images/coconuts.png\")}\n      alt=\"coconuts\"\n      className=\"icon\"\n    />\n  </div>,\n\n  <div className=\"tutorial-step\">\n    <div className=\"tutorial-text\">\n      Two competing monkey pirate fleets vie for the most coconuts.\n      <br />\n      Each player will control a fleet.\n    </div>\n    <img src={require(\"./images/two_ships.png\")} alt=\"ships\" className=\"icon\" />\n  </div>,\n\n  <div className=\"tutorial-step\">\n    <div className=\"tutorial-text\">\n      The board starts with the sea routes (black lines) that existed\n      immediately after the mutinies. New routes will be built from these\n      initial routes.\n    </div>\n    <div className=\"illustration\">\n      <div className=\"image starting\" />\n    </div>\n  </div>,\n\n  <div className=\"tutorial-step\">\n    <div className=\"tutorial-text\">\n      Players take turns dragging a tile from the offer to the board. At least\n      one sea route on the new tile must connect to an existing sea route.\n    </div>\n    <div className=\"illustration\">\n      <div className=\"image turns\" />\n    </div>\n  </div>,\n\n  <div className=\"tutorial-step\">\n    <div className=\"tutorial-text\">\n      The number of coconuts on the route determines the value of the route.\n      <br />\n    </div>\n    <div className=\"illustration\">\n      <div className=\"image coconuts\" />\n      <div className=\"caption\">\n        1 single and 2 double coconuts for 3 total coconuts\n      </div>\n    </div>\n  </div>,\n\n  <div className=\"tutorial-step\">\n    <div className=\"tutorial-text\">\n      A chest doubles the number of coconuts on the route.\n      <br />\n      Multiple chests on the route have the same effect as a single chest.\n    </div>\n    <div className=\"illustration\">\n      <div className=\"image chest\" />\n      <div className=\"caption\">\n        The chest makes these 3 coconuts count as 6 coconuts\n      </div>\n    </div>\n  </div>,\n\n  <div className=\"tutorial-step\">\n    <div className=\"tutorial-text\">\n      The player with the most ships on a route owns the coconuts on that route.\n      If players tie, neither player owns the coconuts for the route. As players\n      vie for control, the score will change.\n    </div>\n    <div className=\"illustration\">\n      <div className=\"image route\" />\n      <div className=\"caption\">\n        2 red ships and 3 blue ships means blue controls all of the coconuts on\n        this route\n      </div>\n    </div>\n  </div>,\n\n  <div className=\"tutorial-step\">\n    <div className=\"tutorial-text\">\n      An anchor at the end of a route doubles the ships of that color on the\n      route. Two anchors of the same color on the route have the same effect as\n      a single anchor.\n    </div>\n    <div className=\"illustration\">\n      <div className=\"image anchor\" />\n      <div className=\"caption\">\n        The red anchor makes the 2 red ships count as 4 ships, so red owns all\n        of the coconuts on this route.\n      </div>\n    </div>\n  </div>,\n\n  <div className=\"tutorial-step\">\n    <div className=\"tutorial-text\">\n      The game ends once all tiles have been placed.\n      <br />\n      The player that owns the most coconuts at the end of the game wins!\n    </div>\n    <img\n      src={require(\"./images/coconuts.png\")}\n      alt=\"coconuts\"\n      className=\"icon\"\n    />\n  </div>,\n];\n\nfunction PreviousButton({ currentRule, setCurrentRule }) {\n  if (currentRule !== 1) {\n    const handlePrevious = () => {\n      let newRule = currentRule - 1;\n      setCurrentRule(newRule);\n    };\n\n    return (\n      <button\n        className=\"navigation-button prev-button\"\n        onClick={handlePrevious}\n      >\n        &lt;\n      </button>\n    );\n  }\n  return (\n    <button disabled className=\"navigation-button prev-button\">\n      &lt;\n    </button>\n  );\n}\n\nfunction NextButton({ currentRule, setCurrentRule }) {\n  if (currentRule < rules.length) {\n    const handleNext = () => {\n      let newRule = currentRule + 1;\n      setCurrentRule(newRule);\n    };\n\n    return (\n      <button className=\"navigation-button next-button\" onClick={handleNext}>\n        &gt;\n      </button>\n    );\n  }\n  return (\n    <button disabled className=\"navigation-button next-button\">\n      &gt;\n    </button>\n  );\n}\n\nexport default function Tutorial({ showRules, setShowRules }) {\n  const [currentRule, setCurrentRule] = useState(1);\n\n  if (showRules) {\n    const handleHide = () => {\n      setCurrentRule(1);\n      setShowRules(false);\n    };\n\n    return (\n        <div className=\"modal\">\n          <div id=\"tutorial\">\n            <PreviousButton\n              currentRule={currentRule}\n              setCurrentRule={setCurrentRule}\n            />\n            {rules[currentRule - 1]}\n            <button id=\"exit-button\" onClick={handleHide}>\n              &#10005;\n            </button>\n            <NextButton\n              currentRule={currentRule}\n              setCurrentRule={setCurrentRule}\n            />\n          </div>\n        </div>\n    );\n  } else {\n    const handleShow = () => {\n      setShowRules(true);\n    };\n\n    return <button id=\"rules-button\" onClick={handleShow}></button>;\n  }\n}\n","import React from \"react\";\nimport Score from \"./Score\";\n\nfunction closeGameOver(e) {\n  e.target.style.display = \"none\";\n}\n\nexport default function GameOver({ remainingTileIDs, routes }) {\n  if (remainingTileIDs.every((item) => item === null)) {\n    return (\n      <div id=\"game-over\" className=\"modal\" onClick={(e) => closeGameOver(e)}>\n        <div>GAME OVER!</div>\n        <Score routes={routes} />\n        <div>Click anywhere to return.</div>\n      </div>\n    );\n  } else {\n    return <></>;\n  }\n}\n","import React, { useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\n\nimport { tiles, BoardRoute } from \"./tiles.js\";\nimport Offer from \"./Offer\";\nimport Board from \"./Board\";\nimport Score from \"./Score\";\nimport Tutorial from \"./Tutorial\";\nimport GameOver from \"./GameOver\";\n\n// TODO\n//todo uninstall react-drag-drop-container / remove from package json\n// fix offset dropping\n// it seems silly to display the rule images via css instead of just as an img element. if figure out how to do, could also have tiles be similar to simplify css.\n// Add undo function\n// More TESTS!\n// linter\n// prettier\n// set up ci to run npm deploy when push to master and to run linter and prettier on PRs/push to master\n// set up branch protection from public randomness\n//\n// force landscape mode if screen width is below certain size\n// images are slow. Make smaller? Cache? SVG tiles???\n// Space the offer to match board height\n// how to not duplicate modal.js between monkeys and stars?\n// would be cool to change color of route to indicate owner\n// make rules swipe-able on mobile\n// Enable keyboard navigation for rules?\n// Enable keyboard navigation for tiles?\n// Tooltip for buttons? What is tooltip alternative for mobile?\n// check color accessibility\n// art-make the routes more level at the edges so connections are smoother\n// art- make sure things aren't too close to L/R\n\nfunction partition(input, numColumns) {\n  var output = [];\n\n  for (var i = 0; i < input.length; i += numColumns) {\n    output[output.length] = input.slice(i, i + numColumns);\n  }\n\n  return output;\n}\n\nfunction validDropQ(played, index, numColumns) {\n  // Partition the flat list of played tiles into a nested list to make the logic clearer\n  const partitionedPlayed = partition(played, numColumns);\n\n  // And convert the flat index into a row/col\n  const row = Math.floor(index / numColumns);\n  const column = index - row * numColumns;\n\n  // If the square or the overlapping one above/below is already occupied,\n  // don't allow a tile to be dropped there\n  if (\n    partitionedPlayed[row][column] ||\n    (partitionedPlayed[row + 1] && partitionedPlayed[row + 1][column]) ||\n    (partitionedPlayed[row - 1] && partitionedPlayed[row - 1][column])\n  ) {\n    return false;\n  }\n\n  // If the square does not touch a tile to the left or right, don't allow the drop\n  if (\n    !(\n      partitionedPlayed[row][column + 1] ||\n      partitionedPlayed[row][column - 1] ||\n      (partitionedPlayed[row + 1] && partitionedPlayed[row + 1][column + 1]) ||\n      (partitionedPlayed[row + 1] && partitionedPlayed[row + 1][column - 1]) ||\n      (partitionedPlayed[row - 1] && partitionedPlayed[row - 1][column + 1]) ||\n      (partitionedPlayed[row - 1] && partitionedPlayed[row - 1][column - 1])\n    )\n  ) {\n    return false;\n  }\n  return true;\n}\n\nexport function shuffleArray(array) {\n  // Swap each value in an array, starting at the end of the array, with a position equal or earlier in the array.\n  for (let index = array.length - 1; index > 0; index--) {\n    // Get a random index from 0 to the current index of the array\n    // So for an array of length 3, the first round will be 0, 1, or 2, second round 0 or 1, and last round 0\n    // The values at this index and the current index will be swapped\n    let swapIndex = Math.floor(Math.random() * (index + 1));\n\n    // If the current index and index to swap are the same, move on to the next loop iteration\n    if (index === swapIndex) {\n      continue;\n    }\n\n    // Get the original value at index,\n    // set the value at the index to be the value at the swap index,\n    // then set the value at the swap index to be the original value at the index\n    let swapValue = array[index];\n    array[index] = array[swapIndex];\n    array[swapIndex] = swapValue;\n  }\n}\n\nexport function getBoardNodesFromFlatIndex(flatIndex, numColumns) {\n  // Convert a 0-indexed grid position to 0-indexed corner numbers of that square in a grid\n  const row = Math.floor(flatIndex / numColumns);\n  const column = flatIndex - row * numColumns;\n\n  let topLeft = row * (numColumns + 1) + column;\n  let topRight = topLeft + 1;\n  let bottomLeft = topLeft + numColumns + 1;\n  let bottomRight = bottomLeft + 1;\n  return [topLeft, topRight, bottomLeft, bottomRight];\n}\n\nexport function updateRoutes(boardRoutes, tile, flatIndex, numColumns) {\n  // Convert the row/col where the tile was placed to numbers describing\n  // the corner positions (\"nodes\") of the tile on the board\n  let boardNodes = getBoardNodesFromFlatIndex(flatIndex, numColumns);\n\n  // For each route on the placed tile:\n  for (let tileRoute of tile.routes) {\n    // Convert the tile head/tail (0, 1, 2, 3, or null) to the corresponding board node\n    let convertedTileHead =\n      typeof tileRoute.tileHead === \"number\"\n        ? boardNodes[tileRoute.tileHead]\n        : null;\n    let convertedTileTail =\n      typeof tileRoute.tileTail === \"number\"\n        ? boardNodes[tileRoute.tileTail]\n        : null;\n\n    // Find if there is an existing board route that matches the tile route head/tail\n    // There will be max 1 route match for head and tail each\n    let headMatch = null;\n    let tailMatch = null;\n\n    for (let boardRoute of boardRoutes) {\n      // If there is a head on the tile route\n      // and we haven't found a head match\n      // and the board route head or tail position matches the position of the tile route head\n      // record the board route as the head match\n      if (\n        convertedTileHead &&\n        !headMatch &&\n        (boardRoute.boardHead === convertedTileHead ||\n          boardRoute.boardTail === convertedTileHead)\n      ) {\n        headMatch = boardRoute;\n      }\n\n      // If there is a tail on the tile route\n      // and we haven't found a tail match\n      // and the board route head or tail position matches the position of the tile route tail\n      // record the board route as the tail match\n      if (\n        convertedTileTail &&\n        !tailMatch &&\n        (boardRoute.boardHead === convertedTileTail ||\n          boardRoute.boardTail === convertedTileTail)\n      ) {\n        tailMatch = boardRoute;\n      }\n\n      // If all possible matches have been found, exit.\n      // (There will be a max 1 route matching the head and 1 matching the tail.)\n      if (\n        (headMatch || !convertedTileHead) &&\n        (tailMatch || !convertedTileTail)\n      ) {\n        break;\n      }\n    }\n\n    // If no match was found for the tile route head or tail,\n    // add the tile route as a new board route\n    if (!headMatch && !tailMatch) {\n      let newRoute = new BoardRoute({\n        boardHead: convertedTileHead,\n        boardTail: convertedTileTail,\n        tileRoutes: [tileRoute],\n      });\n      boardRoutes.push(newRoute);\n    }\n\n    // If only a head or tail (but not both) match was found,\n    // update the matching board route head/tail with the head/tail non-match\n    // and update the board route members\n    else if ((headMatch && !tailMatch) || (tailMatch && !headMatch)) {\n      // Get the matching board route\n      let matchingRoute = headMatch ? headMatch : tailMatch;\n\n      // If the board route matched at the head of the tile route,\n      // the tile tail will replace the board route head or tail\n      // Otherwise, the tile head will replace the board route head or tail\n      let newValue = headMatch ? convertedTileTail : convertedTileHead;\n\n      // Find the node where the board route joins the tile route\n      let matchingValue = headMatch ? convertedTileHead : convertedTileTail;\n\n      // Update the board route head or tail (whichever joins to the new tile) to be the new value\n      matchingRoute.boardHead === matchingValue\n        ? (matchingRoute.boardHead = newValue)\n        : (matchingRoute.boardTail = newValue);\n\n      // Add the new tile to the route\n      matchingRoute.tileRoutes.push(tileRoute);\n    }\n\n    // If head and tail match the same board route, the route is now a loop.\n    // Set the route head/tail to null\n    // and update the board route members\n    else if (headMatch === tailMatch) {\n      headMatch.boardHead = null;\n      headMatch.boardTail = null;\n      headMatch.tileRoutes.push(tileRoute);\n    }\n\n    // Otherwise, head and tail match different routes; the routes are now joined.\n    // Update head/tail on one route,\n    // add the new tile and the tiles from the other route to the updated route,\n    // delete the other route\n    else {\n      // For both matching board routes, set the terminus that doesn't connect to the new tile to be the new head/tail\n      let newHead =\n        headMatch.boardHead === convertedTileHead ||\n        headMatch.boardHead === convertedTileTail\n          ? headMatch.boardTail\n          : headMatch.boardHead;\n      let newTail =\n        tailMatch.boardHead === convertedTileHead ||\n        tailMatch.boardHead === convertedTileTail\n          ? tailMatch.boardTail\n          : tailMatch.boardHead;\n\n      // Arbitrarily keep the \"head route\" as the base route\n      // Update the head and tail\n      headMatch.boardHead = newHead;\n      headMatch.boardTail = newTail;\n\n      // Update the tiles in the route\n      headMatch.tileRoutes = headMatch.tileRoutes.concat(tailMatch.tileRoutes);\n      headMatch.tileRoutes.push(tileRoute);\n\n      // Delete the other board route\n      let indexToDelete = boardRoutes.indexOf(tailMatch);\n      boardRoutes.splice(indexToDelete, 1);\n    }\n  }\n  return boardRoutes;\n}\n\nexport function getInitialSetup(numRows, numColumns) {\n  // Shuffle the tiles\n  let remainingTileIDs = Object.keys(tiles);\n  shuffleArray(remainingTileIDs);\n\n  // Draw 4 tiles for the starting board\n  const initialTiles = remainingTileIDs.splice(0, 4);\n\n  // Make the starting board\n  const startingPositions = [10, 24, 38, 52]; // todo can calc instead\n  const numSquares = numColumns * numRows;\n  let startingBoard = Array(numSquares).fill(null);\n  initialTiles.forEach((tile, index) => {\n    let startingPosition = startingPositions[index];\n    startingBoard[startingPosition] = tile;\n  });\n\n  // Calculate the routes present on the starting tiles\n  // (Right now, each route on the tile will be a unique route; don't need to worry about the tiles connecting)\n  let startingRoutes = [];\n  initialTiles.forEach((tile, index) => {\n    // Convert the row/col where the tile was placed to board node numbers\n    let startingPosition = startingPositions[index];\n    let boardNodes = getBoardNodesFromFlatIndex(startingPosition, numColumns);\n\n    // For each route on the tile, convert the tile-relative head/tail to board-relative head/tail\n    // and add the route to the starting routes\n    for (let route of tiles[tile].routes) {\n      let head = boardNodes[route.tileHead];\n      let tail = boardNodes[route.tileTail];\n      let boardRoute = new BoardRoute({\n        boardHead: head,\n        boardTail: tail,\n        tileRoutes: [route],\n      });\n      startingRoutes.push(boardRoute);\n    }\n  });\n\n  return [remainingTileIDs, startingBoard, startingRoutes];\n}\n\nfunction Game() {\n  const numRows = 9;\n  const numColumns = 7;\n  const [startingTileIDs, startingBoard, startingRoutes] = getInitialSetup(\n    numRows,\n    numColumns\n  );\n  // The box shadow around the draw stack\n  const drawEffect = [\n    \"-1px 1px rgba(27, 211, 235, 0.35)\",\n    \"-1px 1px rgba(0,0,0, 0.15)\",\n    \"-2px 2px rgba(27, 211, 235, 0.35)\",\n    \"-2px 2px rgba(0,0,0, 0.05)\",\n    \"-3px 3px rgba(27, 211, 235, 0.35)\",\n    \"-3px 3px rgba(0,0,0, 0.35)\",\n    \"-4px 4px rgba(27, 211, 235, 0.35)\",\n    \"-4px 4px rgba(0,0,0, 0.25)\",\n    \"-5px 5px rgba(27, 211, 235, 0.35)\",\n    \"-5px 5px rgba(0,0,0, 0.45)\",\n    \"-6px 6px rgba(27, 211, 235, 0.35)\",\n    \"-6px 6px rgba(0,0,0, 0.35)\",\n    \"-7px 7px rgba(27, 211, 235, 0.35)\",\n    \"-7px 7px rgba(0,0,0, 0.15)\",\n    \"-8px 8px rgba(27, 211, 235, 0.35)\",\n    \"-8px 8px rgba(0,0,0, 0.25)\",\n    \"-9px 9px rgba(27, 211, 235, 0.35)\",\n    \"-9px 9px rgba(0,0,0, 0.35)\",\n    \"-10px 10px rgba(27, 211, 235, 0.35)\",\n    \"-10px 10px rgba(0,0,0, 0.45)\",\n    \"-11px 11px rgba(27, 211, 235, 0.35)\",\n    \"-11px 11px rgba(0,0,0, 0.35)\",\n    \"-12px 12px rgba(27, 211, 235, 0.35)\",\n    \"-12px 12px rgba(0,0,0, 0.15)\",\n    \"-13px 13px rgba(27, 211, 235, 0.35)\",\n    \"-13px 13px rgba(0,0,0, 0.35)\",\n  ];\n  const [remainingTileIDs, setRemainingTileIDs] = useState(startingTileIDs);\n  const [played, setPlayed] = useState(startingBoard);\n  const [routes, setRoutes] = useState(startingRoutes);\n  const [showRules, setShowRules] = useState(false);\n  useEffect(() => {\n    const effectiveDrawEffect = drawEffect.slice(\n      0,\n      2 * (remainingTileIDs.length - 3)\n    );\n    let body = document.getElementsByTagName(\"body\")[0];\n    body.style.setProperty(\"--deck-size\", effectiveDrawEffect.join(\",\"));\n  });\n\n  function handleNewGame() {\n    const [startingTileIDs, startingBoard, startingRoutes] = getInitialSetup(\n      numRows,\n      numColumns\n    );\n    setRemainingTileIDs(startingTileIDs);\n    setPlayed(startingBoard);\n    setRoutes(startingRoutes);\n  }\n\n  const handleDrop = (event, flatIndex) => {\n    event.target.style[\"background-color\"] = \"transparent\";\n\n    const offerIndex = event.dataTransfer.getData(\"offerIndex\");\n    const tile = event.dataTransfer.getData(\"tile\");\n    const newPlayed = [...played];\n\n    if (!validDropQ(newPlayed, flatIndex, numColumns)) {\n      return;\n    }\n\n    // Put a token in the square where the token was dropped\n    newPlayed[flatIndex] = tile;\n\n    // Update played\n    setPlayed(newPlayed);\n\n    // update routes\n    let updatedRoutes = updateRoutes(\n      routes.slice(),\n      tiles[tile],\n      flatIndex,\n      numColumns\n    );\n    setRoutes(updatedRoutes);\n\n    // const offerIndex = event.dragData.offerIndex;\n    let newRemainingTileIDs = [...remainingTileIDs];\n    if (newRemainingTileIDs.length > 3) {\n      // replace the played tile with the tile at the bottom of the pool\n      newRemainingTileIDs[offerIndex] =\n        newRemainingTileIDs[newRemainingTileIDs.length - 1];\n      // remove the tile at the bottom of the pool\n      newRemainingTileIDs.splice(-1, 1);\n    } else {\n      // If there aren't unrevealed tiles left, replace the played tile with null\n      newRemainingTileIDs[offerIndex] = null;\n    }\n\n    setRemainingTileIDs(newRemainingTileIDs);\n  };\n\n  return (\n    <div id=\"game\">\n      <Offer remainingTileIDs={remainingTileIDs} />\n      <Board played={played} handleDrop={handleDrop} />\n      <div id=\"off-board\">\n        <Score routes={routes} />\n        <button id=\"new-game-button\" onClick={handleNewGame} />\n        <Tutorial showRules={showRules} setShowRules={setShowRules} />\n        <GameOver remainingTileIDs={remainingTileIDs} routes={routes} />\n      </div>\n    </div>\n  );\n}\n\n// ========================================\n\n// ReactDOM.render(<Game />, document.getElementById(\"root\")); todo\nReactDOM.render(\n  <Game />,\n  document.getElementById(\"root\") || document.createElement(\"div\") // for testing purposes\n);\n","module.exports = __webpack_public_path__ + \"static/media/coconuts.1ae6fa30.png\";"],"sourceRoot":""}